<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Hồ Duy Khang</title><link>https://duykhang0448.github.io/blog/posts/</link><description>Recent content in Posts on Hồ Duy Khang</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 28 Dec 2024 23:39:49 +0530</lastBuildDate><atom:link href="https://duykhang0448.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>9. Java RMI và ứng dụng phân tán đơn giản</title><link>https://duykhang0448.github.io/blog/posts/9-java-rmi/</link><pubDate>Sat, 28 Dec 2024 23:39:49 +0530</pubDate><guid>https://duykhang0448.github.io/blog/posts/9-java-rmi/</guid><description>&lt;h1 id="khái-niệm-rmi">Khái niệm RMI&lt;/h1>
&lt;p>&lt;strong>RMI - Remote Method Invocation là một kĩ thuật cài đặt các đối tượng phân tán trong Java. RMI là một phần của bộ J2SDK và là hàm thư viện hỗ trợ các lời gọi phương thức từ xa và trả về giá trị cho các ứng dụng tính toán phân tán. Chúng ta giả sử rằng ngôn ngữ Java được sử dụng ở cả hai phía gọi và phía bên phương thức được gọi.&lt;/strong>&lt;/p></description></item><item><title>8. Xây dựng chương trình Client-Server nối kết theo dạng multicast (truyền theo nhóm) Java</title><link>https://duykhang0448.github.io/blog/posts/8-multicast-java/</link><pubDate>Sun, 15 Dec 2024 23:39:49 +0530</pubDate><guid>https://duykhang0448.github.io/blog/posts/8-multicast-java/</guid><description>&lt;p>&lt;img src="https://duykhang0448.github.io/blog/images/1596093882.png" alt="Alt text">&lt;/p>
&lt;h1 id="1-multicast-là-gì">1. Multicast là gì?&lt;/h1>
&lt;p>Các cơ chế Socket TCP và UDP đã giới thiệu ở trên đề gọi là unicast, nghĩa là giao tiếp chỉ diễn ra giữa một máy tính gửi và một máy tính nhận.&lt;/p>
&lt;p>Multicast là việc gửi quảng bá (broadcast) nhưng đến một nhóm máy tính ở cùng một địa chỉ cho trước. Địa chỉ multicast là địa chỉ lớp D được xác định trong khoảng 244.0.0.0 đến 239.255.255.255. Địa chỉ 244.0.0.0 là địa chỉ riêng nên không sử dụng được.&lt;/p></description></item><item><title>7. Giao thức UDP là gì? UDP hoạt động như thế nào?</title><link>https://duykhang0448.github.io/blog/posts/7-giao-thuc-udp/</link><pubDate>Fri, 15 Nov 2024 23:39:49 +0530</pubDate><guid>https://duykhang0448.github.io/blog/posts/7-giao-thuc-udp/</guid><description>&lt;p>UDP (User Datagram Protocol) là một trong những giao thức cốt lõi của giao thức TCP/IP. Dùng UDP, chương trình trên mạng máy tính có thể gửi những dữ liệu ngắn được gọi là &lt;strong>datagram&lt;/strong> tới máy khác. UDP không cung cấp sự tin cậy và thứ tự truyền nhận mà TCP làm; các gói dữ liệu có thể đến không đúng thứ tự hoặc bị mất mà không có thông báo. Tuy nhiên UDP nhanh và hiệu quả hơn đối với các mục tiêu như kích thước nhỏ và yêu cầu khắt khe về thời gian. Do bản chất không trạng thái của nó nên nó hữu dụng đối với việc trả lời các truy vấn nhỏ với số lượng lớn người yêu cầu.&lt;/p></description></item><item><title>6. Cách tuần tự hóa hoạt động trong Java</title><link>https://duykhang0448.github.io/blog/posts/6-tuan-tu-hoa-trong-java/</link><pubDate>Sat, 25 May 2024 23:39:49 +0530</pubDate><guid>https://duykhang0448.github.io/blog/posts/6-tuan-tu-hoa-trong-java/</guid><description>&lt;p>&lt;img src="https://duykhang0448.github.io/blog/images/800.webp" alt="Alt text">&lt;/p>
&lt;h1 id="giới-thiệu">Giới thiệu&lt;/h1>
&lt;p>Tuần tự hóa đối tượng là khả năng một đối tượng lưu trữ một bản sao hoàn chỉnh của chính nó và bất kỳ đối tượng nào khác mà nó tham chiếu bằng cách sử dụng luồng đầu ra (ví dụ: vào tệp bên ngoài). Bằng cách này, đối tượng có thể được tạo lại từ bản sao được tuần tự hóa (đã lưu) sau đó một chút khi cần. Tuần tự hóa đối tượng, một tính năng mới được giới thiệu trong JDK 1.1, cung cấp chức năng chuyển đổi các nhóm hoặc đối tượng riêng lẻ thành dòng bit hoặc mảng byte để lưu trữ hoặc truyền qua mạng. Và như đã nêu, một luồng bit hoặc mảng byte nhất định có thể được chuyển đổi trở lại thành các đối tượng Java. Điều này chủ yếu xảy ra tự động nhờ vào &lt;code>ObjectInputStream&lt;/code> và các lớp &lt;code>ObjectOutputStream&lt;/code>. Người lập trình có thể quyết định triển khai chức năng này bằng cách triển khai giao diện &lt;code>Serializable&lt;/code> khi tạo lớp. Quá trình tuần tự hóa còn được gọi là &lt;strong>sắp xếp&lt;/strong> đối tượng , trong khi giải tuần tự hóa được gọi là &lt;strong>không sắp xếp thứ tự&lt;/strong> . Tuần tự hóa là một cơ chế cho phép một đối tượng lưu một bản sao của chính nó và tất cả các đối tượng khác được đối tượng đó tham chiếu vào một tệp bên ngoài bằng cách sử dụng phần mở rộng &lt;code>ObjectOutputStream&lt;/code>. Các đối tượng được lưu có thể là cấu trúc dữ liệu, sơ đồ, đối tượng lớp &lt;code>JFrame&lt;/code> hoặc bất kỳ đối tượng nào khác, bất kể loại của chúng. Đồng thời, quá trình tuần tự hóa lưu trữ thông tin về loại đối tượng để sau này, khi được giải tuần tự hóa, thông tin đó sẽ được sử dụng để tạo lại loại đối tượng chính xác. Vì vậy, tuần tự hóa cung cấp các khả năng sau:&lt;/p></description></item><item><title>5. Lập Trình Socket Cơ Bản Với TCP/IP Trong Java</title><link>https://duykhang0448.github.io/blog/posts/5-lap-trinh-socket-co-ban-voi-tcp/</link><pubDate>Thu, 02 May 2024 23:39:49 +0530</pubDate><guid>https://duykhang0448.github.io/blog/posts/5-lap-trinh-socket-co-ban-voi-tcp/</guid><description>&lt;p>&lt;img src="https://duykhang0448.github.io/blog/images/lap-trinh-socket-voi-tcpip-trong-java-63732476941.2382.jpg" alt="Alt text">&lt;/p>
&lt;p>&lt;em>&lt;strong>Socket được biết đến là cánh cửa giao tiếp giữa hai tiến trình ứng dụng. Socket hỗ trợ nhiều ngôn ngữ (C, java, perl, python,…) cũng như nhiều platform (nix, Windows,…). Socket được viết bằng các ngôn ngữ khác nhau và chạy trên bất kỳ platform nào đều có thể giao tiếp với nhau. Trong bài viết này mình gửi đến các bạn khái niệm cơ bản về Socket cũng như cách lập trình Socket với các loại giao thức.&lt;/strong>&lt;/em>&lt;/p></description></item><item><title>4. InetAddress trong java – Phương thức chuyển tên miền sang IP</title><link>https://duykhang0448.github.io/blog/posts/4-inetaddress-trong-java/</link><pubDate>Thu, 18 Apr 2024 23:39:49 +0530</pubDate><guid>https://duykhang0448.github.io/blog/posts/4-inetaddress-trong-java/</guid><description>&lt;h1 id="1-inetaddress-là-gì">1. InetAddress là gì?&lt;/h1>
&lt;p>Trong Java, InetAddress là một lớp được sử dụng để hỗ trợ các ứng dụng java mạng. Lớp này được thực hiện các hoạt động mạng như chuyển đổi tên miền đã cho sang địa chỉ IP và ngược lại.&lt;/p>
&lt;h1 id="2-các-phương-thức-cơ-bản">2. Các phương thức cơ bản&lt;/h1>
&lt;ul>
&lt;li>&lt;code>getAddress()&lt;/code>: trả về địa chỉ IP thô, nghĩa là một mảng các byte biểu diễn địa chỉ IP dưới dạng dạng nhị phân.&lt;/li>
&lt;li>&lt;code>getAllByName()&lt;/code>: nhận vào tên của một máy chủ (host) và trả về một mảng chứa tất cả các địa chỉ IP tương ứng với máy chủ đó.&lt;/li>
&lt;li>&lt;code>getByAddress(byte[] addr)&lt;/code>: trả về một đối tượng InetAddress dựa trên địa chỉ IP thô được biểu diễn bằng một mảng byte.&lt;/li>
&lt;li>&lt;code>getByName(String host)&lt;/code>: xác định địa chỉ IP của một máy chủ dựa trên tên của máy chủ đó.&lt;/li>
&lt;li>&lt;code>getHostAddress()&lt;/code>: trả về địa chỉ IP dưới dạng văn bản.&lt;/li>
&lt;li>&lt;code>getHostName()&lt;/code>: lấy tên máy chủ.&lt;/li>
&lt;li>&lt;code>getLocalHost()&lt;/code>: trả về địa chỉ IP máy chủ localhost.&lt;/li>
&lt;li>&lt;code>toString()&lt;/code>: chuyển IP thành một chuỗi ký tự.&lt;/li>
&lt;/ul>
&lt;h1 id="3-cách-tạo-đối-tượng-inetaddress-trong-java">3. Cách tạo đối tượng InetAddress trong Java&lt;/h1>
&lt;p>Gói &lt;code>java.net.InetAddress&lt;/code> có lớp InetAddress cho phép bạn làm việc với các tên miền hoặc địa chỉ IP. Thường để bắt đầu, cần tạo ra một đối tượng InetAddress:&lt;/p></description></item><item><title>3. Lập trình đa luồng trong Java (Java Multi-threading)</title><link>https://duykhang0448.github.io/blog/posts/3-lap-trinh-multi-threading/</link><pubDate>Mon, 15 Apr 2024 23:39:49 +0530</pubDate><guid>https://duykhang0448.github.io/blog/posts/3-lap-trinh-multi-threading/</guid><description>&lt;p>&lt;strong>Lập trình đa luồng&lt;/strong> (Multi-threading) là một kỹ thuật trong lập trình mà một ứng dụng có thể thực thi nhiều phần công việc (luồng – thread) một cách đồng thời. Trong Java, đa luồng là một tính năng mạnh mẽ và quan trọng, giúp các ứng dụng có thể tận dụng tối đa tài nguyên CPU và giảm thời gian xử lý bằng cách thực thi nhiều tác vụ cùng lúc.&lt;/p></description></item><item><title>2. Luồng I/O trong Java</title><link>https://duykhang0448.github.io/blog/posts/2-luong-nhap-xuat-trong-java/</link><pubDate>Wed, 20 Dec 2023 23:39:49 +0530</pubDate><guid>https://duykhang0448.github.io/blog/posts/2-luong-nhap-xuat-trong-java/</guid><description>&lt;p>Trong project này chúng ta sẽ cùng nhau làm quen với khái niệm luồng (streams) và file.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Khái niệm luồng (stream)&lt;/strong>: Một stream có thể được định nghĩa như là một dãy liên tục dữ liệu. Java định nghĩa 2 kiểu luồng: byte và ký tự (phiên bản gốc chỉ định nghĩa kiểu luồng byte, và sau đó luồng ký tự được thêm vào trong các phiên bản về sau). Luồng ký tự được thiết kế hỗ trợ việc nhập xuất dữ liệu kiểu ký tự (Unicode). Trong một vài trường hợp luồng ký tự sử dụng hiệu quả hơn luồng byte, nhưng ở mức hệ thống thì tất cả những xuất nhập đều phải qui về byte. Luồng ký tự hỗ trợ hiệu quả chỉ đối với việc quản lý, xử lý các ký tự.&lt;/li>
&lt;/ul>
&lt;h2 id="luồng-byte">Luồng Byte:&lt;/h2>
&lt;ul>
&lt;li>Các luồng byte được định nghĩa dùng hai lớp phân cấp, mức trên cùng là hai lớp trừu tượng &lt;strong>InputStream&lt;/strong> và &lt;strong>OutputStream&lt;/strong>, là các lớp cha của các lớp xuất nhập kiểu byte. InputStream định nghĩa những đặc điểm chung cho những luồng nhập byte. OutputStream mô tả cách xử lý của các luồng xuất byte.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://duykhang0448.github.io/blog/images/TdlBT3Z.png" alt="Alt text">&lt;/p></description></item><item><title>1. Tổng quan về lập trình mạng</title><link>https://duykhang0448.github.io/blog/posts/1-tong-quan-ve-lap-trinh-mang/</link><pubDate>Fri, 15 Dec 2023 23:39:49 +0530</pubDate><guid>https://duykhang0448.github.io/blog/posts/1-tong-quan-ve-lap-trinh-mang/</guid><description>&lt;p>&lt;img src="https://duykhang0448.github.io/blog/images/lap-trinh-mang-topcv.jpg" alt="Alt text">&lt;/p>
&lt;h1 id="tổng-quan-về-lập-trình-mạng--những-kiến-thức-cơ-bản-cần-nắm-rõ">Tổng quan về lập trình mạng – Những kiến thức cơ bản cần nắm rõ&lt;/h1>
&lt;p>Lập trình mạng là một trong những kiến thức được nhiều bạn quan tâm khi tìm hiểu lĩnh vực lập trình. Hãy cùng TopviecIT tìm hiểu ngay về lập trình mạng là gì và những kiến thức cơ bản về khái niệm này.&lt;/p>
&lt;h2 id="lập-trình-mạng-là-gì">Lập trình mạng là gì?&lt;/h2>
&lt;p>Lập trình mạng (Network Programming) là hành động sử dụng mã máy tính để viết các chương trình hoặc quy trình có thể giao tiếp với các chương trình hoặc quy trình khác trên mạng. Các lập trình viên sử dụng các ngôn ngữ lập trình, thư viện mã và giao thức khác nhau để thực hiện công việc.&lt;/p></description></item></channel></rss>